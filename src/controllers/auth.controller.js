const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const admin = require('../config/firebase.config');
const User = require('../models/user.model');
const { sendVerificationEmail, sendNewPasswordEmail } = require('../services/email.service');

// Login with Google: x√°c th·ª±c idToken, ch·ªâ l∆∞u 1 user theo email, kh√¥ng g·ª≠i mail x√°c th·ª±c
exports.loginWithGoogle = async (req, res) => {
  try {
    const { idToken } = req.body;
    if (!idToken) return res.status(400).json({ message: 'Thi·∫øu idToken' });

    // X√°c th·ª±c token v·ªõi Firebase
    const decoded = await admin.auth().verifyIdToken(idToken);
    const { email, name, uid: firebaseUid } = decoded;
    if (!email || !firebaseUid) return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng' });

    // T√¨m user theo email (∆∞u ti√™n gom user)
    let user = await User.findOne({ email });

    if (user) {
      // N·∫øu user ch∆∞a c√≥ firebaseUid th√¨ c·∫≠p nh·∫≠t
      if (!user.firebaseUid) {
        user.firebaseUid = firebaseUid;
        if (!user.loginMethods.includes('google')) user.loginMethods.push('google');
      }
      // N·∫øu user ch∆∞a x√°c th·ª±c (do ƒëƒÉng k√Ω email), c·∫≠p nh·∫≠t isVerified
      if (!user.isVerified) user.isVerified = true;
      await user.save();
    } else {
      // N·∫øu ch∆∞a c√≥ user, t·∫°o m·ªõi v·ªõi isVerified: true
      user = new User({
        email,
        name,
        firebaseUid,
        isVerified: true,
        loginMethods: ['google']
      });
      await user.save();
    }

    // ƒêƒÉng nh·∫≠p th√†nh c√¥ng
    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '24h' });
    return res.json({
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      token,
      user: { email: user.email, name: user.name, isVerified: user.isVerified }
    });
  } catch (error) {
    console.error('L·ªói loginWithGoogle:', error);
    return res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

// Register with Email (send verification email)
exports.registerWithEmail = async (req, res) => {
  try {
    const { email, password, name } = req.body;

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i!' });
    }

    // T·∫°o m√£ x√°c th·ª±c ng·∫´u nhi√™n
    const verificationToken = crypto.randomBytes(32).toString('hex');
    const hashedPassword = await bcrypt.hash(password, 10);

    // L∆∞u user v·ªõi isVerified = false
    const user = new User({
      email,
      name,
      password: hashedPassword,
      isVerified: false,
      verificationToken,
      loginMethods: ['email']
    });
    await user.save();

    // G·ª≠i email x√°c th·ª±c
    const verificationLink = `${process.env.BACKEND_URL}/api/auth/verify-email?token=${verificationToken}`;
    await sendVerificationEmail(email, verificationLink);

    return res.status(201).json({
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c.'
    });

  } catch (error) {
    console.error('L·ªói ƒëƒÉng k√Ω:', error);
    return res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};


// Verify Email (activate user)
exports.verifyEmail = async (req, res) => {
  try {
    const { token } = req.query;
    console.log(' Nh·∫≠n token x√°c th·ª±c:', token);

    const user = await User.findOne({ verificationToken: token });

    if (!user) {
      console.log('Kh√¥ng t√¨m th·∫•y user v·ªõi token:', token);
      return res.redirect(`${process.env.FRONTEND_URL}/email-verified?status=error&message=Token kh√¥ng h·ª£p l·ªá.`);
    }

    user.isVerified = true;
    user.verificationToken = undefined;

    await user.save()
      .then(() => console.log('üíæ C·∫≠p nh·∫≠t MongoDB th√†nh c√¥ng: isVerified = true'))
      .catch(err => console.error(' L·ªói khi l∆∞u user:', err));

    return res.redirect(`${process.env.FRONTEND_URL}/email-verified?status=success`);
  } catch (err) {
    console.error(' L·ªói h·ªá th·ªëng:', err.message);
    return res.redirect(`${process.env.BACKEND_URL}/email-verified?status=error&message=${encodeURIComponent(err.message)}`);
  }
};



// Login with Email (only if verified)
exports.loginWithEmail = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    if (!await bcrypt.compare(password, user.password)) {
      return res.status(401).json({ message: 'M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá' });
    }

    if (!user.isVerified) {
      return res.status(403).json({ message: 'Vui l√≤ng x√°c th·ª±c email tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p.' });
    }

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '24h' });
    return res.json({ token, user: { email: user.email, name: user.name, isVerified: user.isVerified } });
  } catch (error) {
    console.error('L·ªói ƒëƒÉng nh·∫≠p email:', error);
    return res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

// Reset Password
exports.resetPassword = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
    }

    const newPassword = crypto.randomBytes(8).toString('hex');
    const hashed = await bcrypt.hash(newPassword, 10);

    if (user.firebaseUid) {
      await admin.auth().updateUser(user.firebaseUid, { password: newPassword });
    }

    user.password = hashed;
    await user.save();
    await sendNewPasswordEmail(user.email, newPassword, user.name);

    return res.json({ message: 'M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n.' });
  } catch (error) {
    console.error('L·ªói reset password:', error);
    return res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: error.message });
  }
};

exports.verifyGoogleLogin = async (req, res) => {
  try {
    const { token } = req.query;
    const user = await User.findOne({ verificationToken: token });
    if (!user) {
      return res.redirect(`${process.env.FRONTEND_URL}/login?status=error&message=Token x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n`);
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c
    user.isVerified = true;
    user.verificationToken = undefined;
    await user.save();

    // T·∫°o JWT token
    const authToken = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
      expiresIn: '24h'
    });

    // Redirect v·ªÅ frontend v·ªõi token
    return res.redirect(`${process.env.FRONTEND_URL}/login?status=success&token=${authToken}`);
  } catch (error) {
    res.redirect(`${process.env.FRONTEND_URL}/login?status=error&message=${encodeURIComponent(error.message)}`);
  }
};
